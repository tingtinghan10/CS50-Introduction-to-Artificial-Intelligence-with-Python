import os
import random
import re
import sys
import copy

DAMPING = 0.85
SAMPLES = 10000


def main():
    if len(sys.argv) != 2:
        sys.exit("Usage: python pagerank.py corpus")
    corpus = crawl(sys.argv[1])
    ranks = sample_pagerank(corpus, DAMPING, SAMPLES)
    print(f"PageRank Results from Sampling (n = {SAMPLES})")
    for page in sorted(ranks):
        print(f"  {page}: {ranks[page]:.4f}")
    ranks = iterate_pagerank(corpus, DAMPING)
    print(f"PageRank Results from Iteration")
    for page in sorted(ranks):
        print(f"  {page}: {ranks[page]:.4f}")


def crawl(directory):
    """
    Parse a directory of HTML pages and check for links to other pages.
    Return a dictionary where each key is a page, and values are
    a list of all other pages in the corpus that are linked to by the page.
    """
    pages = dict()

    # Extract all links from HTML files
    for filename in os.listdir(directory):
        if not filename.endswith(".html"):
            continue
        with open(os.path.join(directory, filename)) as f:
            contents = f.read()
            links = re.findall(r"<a\s+(?:[^>]*?)href=\"([^\"]*)\"", contents)
            pages[filename] = set(links) - {filename}

    # Only include links to other pages in the corpus
    for filename in pages:
        pages[filename] = set(
            link for link in pages[filename]
            if link in pages
        )

    return pages


def transition_model(corpus, page, damping_factor):
    """
    Return a probability distribution over which page to visit next,
    given a current page.

    With probability `damping_factor`, choose a link at random
    linked to by `page`. With probability `1 - damping_factor`, choose
    a link at random chosen from all pages in the corpus.
    """
    prob = dict.fromkeys(corpus.keys())
    # begin by assigning each page a rank of 0
    for pg in prob:
        prob[pg] = 0

    for pg in list(prob.keys()):
        if pg in corpus[page]:
            # pg in corpus[page] AND pg == page -> links from a page to itself are ignored
            if pg == page:
                if len(corpus[page]) > 1:
                    # pg linked to page
                    prob[pg] = ((1 - damping_factor) / len(corpus)) + (damping_factor / (len(corpus[page])-1))
                else:
                    prob[pg] = ((1 - damping_factor) / len(corpus))
            else:
                prob[pg] = ((1 - damping_factor) / len(corpus)) + (damping_factor / len(corpus[page]))
        else:
            # pg not linked to page
            prob[pg] = ((1 - damping_factor) / len(corpus))
    return prob


def sample_pagerank(corpus, damping_factor, n):
    """
    Return PageRank values for each page by sampling `n` pages
    according to transition model, starting with a page at random.

    Return a dictionary where keys are page names, and values are
    their estimated PageRank value (a value between 0 and 1). All
    PageRank values should sum to 1.
    """
    page_rank = dict.fromkeys(corpus.keys())
    # begin by assigning each page a rank of 0
    for pg in page_rank:
        page_rank[pg] = 0

    # first sample should be generated by choosing from a page at random
    sample = random.choice(list(corpus.keys()))
    page_rank[sample] = 1 / n
    prob_next = transition_model(corpus, sample, damping_factor)

    # starting from 2nd sample
    for i in range(n - 1):
        sample = random.choices(list(prob_next.keys()), weights=list(prob_next.values()), k=1)
        page_rank[sample[0]] += 1 / n
        prob_next = transition_model(corpus, sample[0], damping_factor)

    return page_rank


def iterate_pagerank(corpus, damping_factor):
    """
    Return PageRank values for each page by iteratively updating
    PageRank values until convergence.

    Return a dictionary where keys are page names, and values are
    their estimated PageRank value (a value between 0 and 1). All
    PageRank values should sum to 1.
    """
    page_rank = dict.fromkeys(corpus.keys())
    # begin by assigning each page a rank of 1 / N
    for pg in page_rank:
        page_rank[pg] = 1 / len(corpus)

    diff = dict.fromkeys(corpus.keys())
    page_rank_new = dict.fromkeys(corpus.keys())
    repeat = list(corpus.keys())
    while len(repeat) > 0:
        for pg in page_rank:
            new_pgrank = 0
            for link_from in corpus:

                # A page that has no links at all should be interpreted as having one link for every page in the corpus (including itself)
                if len(corpus[link_from]) == 0:
                    new_pgrank += page_rank[link_from] / len(corpus)

                # get the parent for current pg
                elif pg in corpus[link_from]:
                    new_pgrank += page_rank[link_from] / len(corpus[link_from])

            new_pgrank = ((1 - damping_factor) / len(corpus)) + (damping_factor * new_pgrank)
            diff[pg] = abs(page_rank[pg] - new_pgrank)
            page_rank_new[pg] = new_pgrank
        
        repeat = [k for k, v in diff.items() if v > 0.001]
        
        # only update values if difference is still larger than 0.01
        if len(repeat) > 0:
            page_rank = copy.deepcopy(page_rank_new)
    
    return page_rank


if __name__ == "__main__":
    main()